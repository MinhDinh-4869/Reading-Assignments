Chapter 27: The static specifier
-The static specifier s√°y the object with that spec has a static storage duration.
-The memory space for a static object is allocated when the program begins and deallocated when the program ends.*
-The value stored in a static object will not disappear when the function that holds it is recalled
-Only one instance of a static object can be exist in program.
  --e.g:
    #include <iostream>
     using namespace std;
     class MyClass
     {
      public:
	    void Hello()
	    {
		    static int x = 0;
		    x++;
		    cout <<x <<endl;
	    }
     };
    int main()
    {
	  MyClass a;
	  a.Hello();//x=1
	  a.Hello();//x=2
	  a.Hello();//x=3
	  return 0;
    }
Chapter 28: Template
-A mechanism that supports generic programming --> create a function or class that we dont have to consider what types of the parameters are.
-Syntax: template<typename T>
	//function definition goes here
	//e.g: void FuncName(T param)
	{
	cout << "THe value of parameter is: << param;//parameter is of type T
	}
	int main()
	{
	FuncName<int>(40);//print out 40
	}
-typename T: T can be consider as a placeholder of a specific data type, which can be replaced when the function is called.
-Template can have more than 1 parameter: template<typename T, typename U, typename ....>
					  void Function(T t, U u)
-Template can be used for class:
	#include <iostream>
	using namespace std;
	template<typename T>
	class MyClass
	{
	private:
	T x;
	public:
	MyClass(T x)
	{
	this->x = x;
	}
	void getX()
	{
	cout << this->x<<endl;
	}
	};
	int main()
	{
	MyClass<int> o(100);
	o.getX();
	}
-A function can be specialized as an exception using template<> type funcName(data_type(int, double,...)){codes go here}
	--This type of function will be called when the argument is matched with the type of paramenter of the function.
	--e.g:#include <iostream>
		using namespace std;

		template<typename T>
		void myfunction(T arg)
		{
		std::cout << "The value of an argument is: " << arg << '\n';
		}
		template <>
		// the rest of our code
		void myfunction(int arg)
		{
		std::cout << "This is a specialization int. The value is: " << arg <<
		'\n';
		}
		int main()
		{
		myfunction<char>('A');//invokes non_specialization
		myfunction<double>(345.678);
		myfunction<int>(123); // invokes specialization b'cause argument is int.
		}
Chapter 29: Enumerators
-A way to define constants
-There are 2 types: unscoped and scoped.
	--eg:1.
		enum MyEnum
		{
		myfirstvalue=9,
		mysecondvalue,
		mythirdvalue
		};
		int main()
		{
		MyEnum myenum = mysecondvalue;
		cout << myenum;
		}
		
		
	    2.
		enum class MyEnum											
		{
		myfirstvalue,
		mysecondvalue,
		mythirdvalue
		};
		int main()
		{
		MyEnum myenum = MyEnum::myfirstvalue;
		}
Chapter 31: Organizing Code
-Header and Source files:
	-Header files are files where we can put various declaration. End with .h or .hpp
	-Source files are files where we store our codes in. End with .c or .cpp
-To use a standard library header, <header_name> is used, "header_name.h" is used for user defined header.
-We should put declarations and constants into header files and executable code in source files.
-Namespace: Namespace is a scope with a name.
- TO declare a namespace: 
	-namespace NAME_SPACE_NAME
	{// codes goes here!}
-To access an elements in a namespace: NAME_SPACE_NAME::VAR_NAME;
-We avoid using :: by: using namespace NAME_SPACE_NAME;
